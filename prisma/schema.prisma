// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Atau "mysql", "sqlite", "sqlserver"
  url      = env("DATABASE_URL")
}

/// Enum untuk peran pengguna
enum Role {
  USER
  ADMIN
}

/// Model untuk Pengguna dan Admin
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String   // Akan menyimpan hash password, bukan plain text
  rekening  String   @unique @default("")
  role      Role     @default(USER)
  balance   Decimal  @default(0) @db.Decimal(12, 2) // Saldo pengguna

  // Relasi: Satu user bisa punya banyak transaksi
  transactions        Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


/// Model untuk Jenis dan Harga Sampah
model WasteCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique // Nama sampah, cth: "Botol Plastik PET"
  pricePerKg  Decimal  @db.Decimal(10, 2) // Harga per kilogram

  // Relasi: Jenis sampah ini bisa ada di banyak item transaksi
  transactionItems TransactionItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


/// Enum untuk tipe transaksi
enum TransactionType {
  DEPOSIT    // Setoran sampah
  WITHDRAWAL // Penarikan saldo
}

model Transaction {
  id            String          @id @default(cuid())
  userId        String          // Foreign key ke User
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          TransactionType // Tipe transaksi: SETORAN atau PENARIKAN
  totalAmount   Decimal         @db.Decimal(12, 2) // Total nilai transaksi. Untuk DEPOSIT, ini adalah total nilai sampah. Untuk WITHDRAWAL, ini adalah jumlah uang yang ditarik.
  description   String?         // Deskripsi opsional, cth: "Penarikan tunai"

  // Relasi: Satu transaksi setoran bisa memiliki banyak item sampah
  items         TransactionItem[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([userId])
}


model TransactionItem {
/// Model perantara untuk detail item dalam satu transaksi setoran
  id              Int      @id @default(autoincrement())
  transactionId   String   // Foreign key ke Transaction
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  wasteCategoryId Int      // Foreign key ke WasteCategory
  wasteCategory   WasteCategory @relation(fields: [wasteCategoryId], references: [id])

  weightInKg      Decimal  @db.Decimal(8, 2)  // Berat sampah dalam kg
  subtotal        Decimal  @db.Decimal(12, 2) // Harga saat transaksi (pricePerKg * weightInKg)

}